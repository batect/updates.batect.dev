containers:
  build-env:
    build_directory: .batect/build-env
    volumes:
      - local: .
        container: /code
        options: cached
      - type: cache
        name: go-cache
        container: /go
      - type: cache
        name: golangci-cache
        container: /home/container-user/.cache/golangci-lint/
    working_directory: /code
    environment:
      GOCACHE: /go/cache
    run_as_current_user:
      enabled: true
      home_directory: /home/container-user

  terraform:
    build_directory: .batect/terraform
    build_args:
      CLOUD_SDK_VERSION: <{cloudSdkVersion}
    volumes:
      - local: .
        container: /code
        options: cached
      - local: .gcloud
        container: /root/.config/gcloud
        options: cached
    working_directory: /code
    environment:
      GOOGLE_PROJECT: <{gcpProject}
      GOOGLE_REGION: <{gcpRegion}
      TF_CLI_ARGS_import: -state=terraform-<{gcpProject}.tfstate
      TF_CLI_ARGS_apply: -state=terraform-<{gcpProject}.tfstate
      TF_CLI_ARGS_plan: -state=terraform-<{gcpProject}.tfstate
      TF_CLI_ARGS_destroy: -state=terraform-<{gcpProject}.tfstate
      TF_CLI_ARGS_state_list: -state=terraform-<{gcpProject}.tfstate

  observatory:
    build_directory: .batect/observatory

tasks:
  setupTerraform:
    description: Initialise Terraform.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: sh -c 'terraform init -input=false -reconfigure -backend-config="bucket=$GOOGLE_PROJECT-terraform-state" -backend-config="credentials=../.creds/gcp_service_account_${CLOUDSDK_ACTIVE_CONFIG_NAME}.json"'
      working_directory: /code/src
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}
        ROOT_DOMAIN: <{rootDomain}
        SUBDOMAIN: <{subdomain}

  applyTerraform:
    description: Run Terraform to provision infrastructure.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: terraform apply -input=false -auto-approve
      working_directory: /code/src
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}
        ROOT_DOMAIN: <{rootDomain}
        SUBDOMAIN: <{subdomain}

  planTerraform:
    description: Plan changes required to bring infrastructure to desired state.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: terraform plan -input=false
      working_directory: /code/src
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}

  destroyTerraform:
    description: Run Terraform to provision infrastructure.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: terraform destroy -input=false -auto-approve
      working_directory: /code/src
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}

  checkTerraformState:
    description: Check that the infrastructure matches the desired state.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: terraform plan -detailed-exitcode -input=false -lock=false
      working_directory: /code/src
      environment:
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}

  terraformShell:
    description: Start a shell in the Terraform environment.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: bash

  setupGCPServiceAccount:
    description: Store credentials used to access GCP when deploying the application.
    group: Setup tasks
    run:
      container: terraform
      command: scripts/setup_service_account.sh
      environment:
        GCP_SERVICE_ACCOUNT_EMAIL: $GCP_SERVICE_ACCOUNT_EMAIL
        GCP_SERVICE_ACCOUNT_KEY: $GCP_SERVICE_ACCOUNT_KEY
        CLOUDSDK_ACTIVE_CONFIG_NAME: app-<{gcpProject}

  lintTerraform:
    description: Check for linting errors in Terraform files.
    group: Linting tasks
    run:
      container: terraform
      command: terraform fmt -diff -check -recursive src

  lintFixTerraform:
    description: Fix linting errors in Terraform files.
    group: Linting tasks
    run:
      container: terraform
      command: terraform fmt -recursive src

  setupCloudflareKey:
    description: Store credentials used to access Cloudflare when deploying the application.
    group: Infrastructure management tasks
    run:
      container: terraform
      command: sh -c "echo $CLOUDFLARE_KEY > .creds/cloudflare_key"
      environment:
        CLOUDFLARE_KEY: $CLOUDFLARE_KEY

  checkSecurity:
    description: Check HTTP security of deployed service.
    group: Test tasks
    run:
      container: observatory
      command: sh -c "observatory $DOMAIN --format report --zero --rescan --attempts 40 && observatory $DOMAIN --format report --min-grade A+ --min-score 100 --attempts 20"
      environment:
        DOMAIN: <{subdomain}.<{rootDomain}

  checkLicenseHeader:
    description: Check that all files have the required license header.
    group: Linting tasks
    run:
      container: build-env
      command: ./scripts/check_licenses.sh

  smokeTest:
    description: Run a smoke test against a deployed version of the service.
    group: Test tasks
    run:
      container: terraform
      command: sh -c "./scripts/smoke_test.sh $DOMAIN"
      environment:
        DOMAIN: <{subdomain}.<{rootDomain}

config_variables:
  gcpProject:
    description: GCP project to use.

  gcpRegion:
    default: us-central1

  cloudSdkVersion:
    default: 330.0.0

  rootDomain:
    description: Root domain name registered with Cloudflare.
    default: batect.dev

  subdomain:
    description: Subdomain (under rootDomain) to host the application at.
